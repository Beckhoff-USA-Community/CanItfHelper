<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CanItfHelper" Id="{b9df2e6f-2b41-0851-3568-c172a0d31bab}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'hide_all_locals'}
FUNCTION_BLOCK FB_CanItfHelper //Call FB once per task tick before calling methods.
VAR_INPUT
	pRxQueue 				: POINTER TO BYTE; //must pass either ST_RxCanQueue_11bit or ST_RxCanQueue_29bit or ST_RxCanQueue_29bit_CX2500_M510
	cbRxQueueSize 			: UDINT;
	pTxQueue 				: POINTER TO BYTE; //must pass either ST_TxCanQueue_11bit or ST_TxCanQueue_29bit or ST_TxCanQueue_29bit_CX2500_M510
	cbTxQueueSize 			: UDINT;	
END_VAR
VAR_OUTPUT
	bValidSetup				: BOOL := FALSE;// indictor that input pointers are non zero and sizes are correct.
	bRxMsgsAcked			: BOOL;// RxMessages have been acknowledge, RxQueue will update automatically when next RxMessage/s is received.
	bTxMsgsSending			: BOOL;// TxMessages have been flagged to be sent the next time an IO update occurs.
END_VAR

VAR
	_uRxQueue				: U_RxQueue;
	_uTxQueue				: U_TxQueue;
	
	_nTxSendTaskCnt			: UDINT; //Internal counter helps determine if mAddTxMessage is allowed to add more messages even though TxQueue. TxCounter is flagged to send new data. Intended to optimism Queue by enlimiting a race condition. 
	_nRxMsgReadedIndex 		: UINT; 
	_nTxMsgSendCnt 			: UINT;
	_bTxMsgSent				: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[THIS^.mCheckSetup();]]></ST>
    </Implementation>
    <Method Name="mCheckSetup" Id="{0a60cd3d-5abc-0530-1814-55a7e58c5b08}">
      <Declaration><![CDATA[METHOD PRIVATE mCheckSetup : E_CanItfHelperHResult
VAR

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mCheckSetup := E_CanItfHelperHResult.NoError;
	
IF (pRxQueue <> 0) AND (pTxQueue <> 0) THEN
	bValidSetup := FALSE;
	mCheckSetup := E_CanItfHelperHResult.InvalidSetup;
	RETURN;
END_IF	

IF cbRxQueueSize =  SIZEOF(ST_RxCanQueue_11bit) AND cbTxQueueSize = SIZEOF(ST_TxCanQueue_11bit) THEN
	mCheckSetup := E_CanItfHelperHResult.NoError_11Bit;
ELSIF cbRxQueueSize =  SIZEOF(ST_RxCanQueue_29bit) AND cbTxQueueSize = SIZEOF(ST_TxCanQueue_29bit) THEN
	mCheckSetup := E_CanItfHelperHResult.NoError_29Bit;
ELSIF cbRxQueueSize =  SIZEOF(ST_RxCanQueue_29bit_nTrans) AND cbTxQueueSize = SIZEOF(ST_TxCanQueue_29bit_nTrans) THEN
	mCheckSetup := E_CanItfHelperHResult.NoError_29Bit_nTrans;
ELSE 
	mCheckSetup := E_CanItfHelperHResult.Error;
END_IF

IF mCheckSetup <> E_CanItfHelperHResult.Error THEN
	bValidSetup := TRUE;
	_uRxQueue.pRxQueue_11bit := pRxQueue;
	_uTxQueue.pTxQueue_11bit := pTxQueue;
ELSE
	bValidSetup := FALSE;
	mCheckSetup := E_CanItfHelperHResult.InvalidSetup;
	RETURN;
END_IF


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mRxMessageGet" Id="{9cb1b0fa-a2ab-0deb-0c75-606d9d4a3b94}">
      <Declaration><![CDATA[METHOD mRxMessageGet : E_CanItfHelperHResult //Copies the top in the RxQueue to a ST_CanMessage.
VAR_INPUT
	pRxCanMessage : POINTER TO ST_CanMsg := NULL; //Gets current CAN message on the next message in queue and overwrites value passed by reference stCanMsg, must pass type ST_CanMessage
	bPeakOnly : BOOL := FALSE; // if true and method completes successfully -> message is not from RxQueue. 	 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mRxMessageGet := THIS^.mCheckSetup();
IF (mRxMessageGet <= E_CanItfHelperHResult.Error) THEN
	RETURN;
END_IF

IF (pRxCanMessage = NULL) THEN
	mRxMessageGet := E_CanItfHelperHResult.InvalidPointer;
	RETURN;
END_IF


CASE mRxMessageGet OF
	E_CanItfHelperHResult.NoError_11Bit:	//Checks fors 11bit items
		IF (_uRxQueue.pRxQueue_11bit^.nNoOfmessages > GVL_CanItfHelper.nRxQueueUpperIndex) THEN
			mRxMessageGet := E_CanItfHelperHResult.RxMessageInvalid;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_11bit^.nNoOfmessages = _nRxMsgReadedIndex) OR bRxMsgsAcked THEN
			mRxMessageGet := E_CanItfHelperHResult.RxQueueEmpty;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_11bit^.nRxCounter <> _uTxQueue.pTxQueue_11bit^.nRxCounter) THEN
			IF bRxMsgsAcked THEN
				_nRxMsgReadedIndex := 0;
			END_IF
			bRxMsgsAcked := FALSE;
		END_IF
		
		pRxCanMessage^.CanData := _uRxQueue.pRxQueue_11bit^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize].aData;
		pRxCanMessage^.CanHeader := F_HwGetAddrInfo_11bit(nInput := _uRxQueue.pRxQueue_11bit^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize].nCobid);
		mRxMessageGet := E_CanItfHelperHResult.NoError;
		
		IF NOT bPeakOnly THEN
			_nRxMsgReadedIndex := _nRxMsgReadedIndex + 1;
		END_IF
		
	E_CanItfHelperHResult.NoError_29Bit:	//Checks for 29 bit items
	
		IF (_uRxQueue.pRxQueue_29bit^.nNoOfmessages > GVL_CanItfHelper.nRxQueueUpperIndex) THEN
			mRxMessageGet := E_CanItfHelperHResult.RxMessageInvalid;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_29bit^.nNoOfmessages = _nRxMsgReadedIndex) OR bRxMsgsAcked THEN
			mRxMessageGet := E_CanItfHelperHResult.RxQueueEmpty;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_29bit^.nRxCounter <> _uTxQueue.pTxQueue_29bit^.nRxCounter) THEN
			IF bRxMsgsAcked THEN
				_nRxMsgReadedIndex := 0;
			END_IF
			bRxMsgsAcked := FALSE;
		END_IF
		
		pRxCanMessage^.CanData := _uRxQueue.pRxQueue_29bit^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize].aData;
		pRxCanMessage^.CanHeader := F_HwGetAddrInfo_29bit(stInput := _uRxQueue.pRxQueue_29bit^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize]);
		mRxMessageGet := E_CanItfHelperHResult.NoError;
		
		IF NOT bPeakOnly THEN
			_nRxMsgReadedIndex := _nRxMsgReadedIndex + 1;
		END_IF
		
	E_CanItfHelperHResult.NoError_29Bit_nTrans: 	//Checks for 29 bit items
		
		IF (_uRxQueue.pRxQueue_29bit_nTrans^.nNoOfmessages > GVL_CanItfHelper.nRxQueueUpperIndex) THEN
			mRxMessageGet := E_CanItfHelperHResult.RxMessageInvalid;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_29bit_nTrans^.nNoOfmessages = _nRxMsgReadedIndex) OR bRxMsgsAcked THEN
			mRxMessageGet := E_CanItfHelperHResult.RxQueueEmpty;
			RETURN;
		END_IF
		
		IF (_uRxQueue.pRxQueue_29bit_nTrans^.nRxCounter <> _uTxQueue.pTxQueue_29bit_nTrans^.nRxCounter) THEN
			IF bRxMsgsAcked THEN
				_nRxMsgReadedIndex := 0;
			END_IF
			bRxMsgsAcked := FALSE;
		END_IF
		
		pRxCanMessage^.CanData := _uRxQueue.pRxQueue_29bit_nTrans^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize].aData;
		pRxCanMessage^.CanHeader := F_HwGetAddrInfo_29bit_nTrans(stInput := _uRxQueue.pRxQueue_29bit_nTrans^.aMessages[_nRxMsgReadedIndex MOD Param_CanItfHelper.nRxQueueSize]);
		mRxMessageGet := E_CanItfHelperHResult.NoError;
		
		IF NOT bPeakOnly THEN
			_nRxMsgReadedIndex := _nRxMsgReadedIndex + 1;
		END_IF
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="mRxMessagesAck" Id="{5f924a8f-f295-0e4c-3a27-d9d0c16c6621}">
      <Declaration><![CDATA[METHOD mRxMessagesAck : E_CanItfHelperHResult //ackownledge current RxMessages to new RxMessages to be recieved. NOTE: Call this at the end of the PLC task cycle.
VAR_INPUT
	bForceAck : BOOL;	//If true, RxQueue is ackownledged even if there are un read messages.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[mRxMessagesAck := THIS^.mCheckSetup();
IF (mRxMessagesAck <= E_CanItfHelperHResult.Error) THEN
	RETURN;
END_IF

CASE mRxMessagesAck OF 
	E_CanItfHelperHResult.NoError_11Bit:
		IF (_uRxQueue.pRxQueue_11bit^.nRxCounter <> _uTxQueue.pTxQueue_11bit^.nRxCounter) THEN
	
			IF ((_uRxQueue.pRxQueue_11bit^.nNoOfmessages = _nRxMsgReadedIndex) OR (bForceAck = TRUE)) THEN
				_uTxQueue.pTxQueue_11bit^.nRxCounter := _uRxQueue.pRxQueue_11bit^.nRxCounter;
				_nRxMsgReadedIndex := 0;
				bRxMsgsAcked := TRUE;
				mRxMessagesAck := E_CanItfHelperHResult.NoError;
			ELSE
				bRxMsgsAcked := FALSE;
				mRxMessagesAck := E_CanItfHelperHResult.RxQueueHasUnreadMessages;
			END_IF
			
		ELSE	
			_nRxMsgReadedIndex := 0;
			bRxMsgsAcked := TRUE;
			mRxMessagesAck :=	E_CanItfHelperHResult.NoNewRxMessages;
		END_IF
	
	E_CanItfHelperHResult.NoError_29Bit:	//29bit handling
		IF (_uRxQueue.pRxQueue_29bit^.nRxCounter <> _uTxQueue.pTxQueue_29bit^.nRxCounter) THEN
	
			IF ((_uRxQueue.pRxQueue_29bit^.nNoOfmessages = _nRxMsgReadedIndex) OR (bForceAck = TRUE)) THEN
				_uTxQueue.pTxQueue_29bit^.nRxCounter := _uRxQueue.pRxQueue_29bit^.nRxCounter;
				_nRxMsgReadedIndex := 0;
				bRxMsgsAcked := TRUE;
				mRxMessagesAck := E_CanItfHelperHResult.NoError;
			ELSE
				bRxMsgsAcked := FALSE;
				mRxMessagesAck := E_CanItfHelperHResult.RxQueueHasUnreadMessages;
			END_IF
			
		ELSE	
			_nRxMsgReadedIndex := 0;
			bRxMsgsAcked := TRUE;
			mRxMessagesAck :=	E_CanItfHelperHResult.NoNewRxMessages;
		END_IF
	
	E_CanItfHelperHResult.NoError_29Bit_nTrans:	//29bit handling
		IF (_uRxQueue.pRxQueue_29bit_nTrans^.nRxCounter <> _uTxQueue.pTxQueue_29bit_nTrans^.nRxCounter) THEN
	
			IF ((_uRxQueue.pRxQueue_29bit_nTrans^.nNoOfmessages = _nRxMsgReadedIndex) OR (bForceAck = TRUE)) THEN
				_uTxQueue.pTxQueue_29bit_nTrans^.nRxCounter := _uRxQueue.pRxQueue_29bit_nTrans^.nRxCounter;
				_nRxMsgReadedIndex := 0;
				bRxMsgsAcked := TRUE;
				mRxMessagesAck := E_CanItfHelperHResult.NoError;
			ELSE
				bRxMsgsAcked := FALSE;
				mRxMessagesAck := E_CanItfHelperHResult.RxQueueHasUnreadMessages;
			END_IF
			
		ELSE	
			_nRxMsgReadedIndex := 0;
			bRxMsgsAcked := TRUE;
			mRxMessagesAck :=	E_CanItfHelperHResult.NoNewRxMessages;
			_nRxMsgReadedIndex := 0;
		END_IF
	ELSE
		mRxMessagesAck := E_CanItfHelperHResult.InvalidSetup;
END_CASE


]]></ST>
      </Implementation>
    </Method>
    <Method Name="mTxMessageAdd" Id="{11fdcf98-819c-04c7-1129-6d52161ffec1}">
      <Declaration><![CDATA[METHOD mTxMessageAdd : E_CanItfHelperHResult
VAR_INPUT
	pTxCanMessage : POINTER TO ST_CanMsg := NULL; //Writes stCanQueue to queue, value passed by reference, must pass type ST_CanMessage
END_VAR



]]></Declaration>
      <Implementation>
        <ST><![CDATA[mTxMessageAdd := THIS^.mCheckSetup();
IF (mTxMessageAdd < E_CanItfHelperHResult.NoError) THEN
	RETURN;
END_IF

IF (pTxCanMessage = NULL) THEN
	mTxMessageAdd := E_CanItfHelperHResult.InvalidPointer;
	RETURN;
END_IF


//Add Case here
CASE mTxMessageAdd OF
	E_CanItfHelperHResult.NoError_11Bit:

		IF (_uTxQueue.pTxQueue_11bit^.nTxCounter <> _uRxQueue.pRxQueue_11bit^.nTxCounter) THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessageAdd := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF
	
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
		END_IF
		
		IF (_nTxMsgSendCnt > GVL_CanItfHelper.nTxQueueUpperIndex) THEN
			mTxMessageAdd := E_CanItfHelperHResult.TxQueueFull;
			RETURN;
		END_IF	
	

		_uTxQueue.pTxQueue_11bit^.aMessages[_nTxMsgSendCnt].nCobid := F_HwSetAddrInfo_11bit(pTxCanMessage^.CanHeader);
		_uTxQueue.pTxQueue_11bit^.aMessages[_nTxMsgSendCnt].aData := pTxCanMessage^.CanData;
		_nTxMsgSendCnt := _nTxMsgSendCnt + 1;
		mTxMessageAdd := E_CanItfHelperHResult.NoError;
		
	E_CanItfHelperHResult.NoError_29Bit:
		
		IF (_uTxQueue.pTxQueue_29bit^.nTxCounter <> _uRxQueue.pRxQueue_29bit^.nTxCounter) THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessageAdd := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF
	
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
		END_IF
		
		IF (_nTxMsgSendCnt > GVL_CanItfHelper.nTxQueueUpperIndex) THEN
			mTxMessageAdd := E_CanItfHelperHResult.TxQueueFull;
			RETURN;
		END_IF
		
	
		_uTxQueue.pTxQueue_29bit^.aMessages[_nTxMsgSendCnt] := F_HwSetAddrInfo_29bit(pTxCanMessage^.CanHeader);
		_uTxQueue.pTxQueue_29bit^.aMessages[_nTxMsgSendCnt].aData := pTxCanMessage^.CanData;
		_nTxMsgSendCnt := _nTxMsgSendCnt + 1;
		mTxMessageAdd := E_CanItfHelperHResult.NoError;
	
	
	E_CanItfHelperHResult.NoError_29Bit_nTrans:
	
		IF (_uTxQueue.pTxQueue_29bit_nTrans^.nTxCounter <> _uRxQueue.pRxQueue_29bit_nTrans^.nTxCounter) THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessageAdd := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF
	
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
		END_IF
		
		IF (_nTxMsgSendCnt > GVL_CanItfHelper.nTxQueueUpperIndex) THEN
			mTxMessageAdd := E_CanItfHelperHResult.TxQueueFull;
			RETURN;
		END_IF
		
		_uTxQueue.pTxQueue_29bit_nTrans^.aMessages[_nTxMsgSendCnt] := F_HwSetAddrInfo_29bit_nTrans(pTxCanMessage^.CanHeader);
		_uTxQueue.pTxQueue_29bit_nTrans^.aMessages[_nTxMsgSendCnt].aData := pTxCanMessage^.CanData;
		_nTxMsgSendCnt := _nTxMsgSendCnt + 1;
		mTxMessageAdd := E_CanItfHelperHResult.NoError;
END_CASE	]]></ST>
      </Implementation>
    </Method>
    <Method Name="mTxMessgesSend" Id="{723d6171-6cad-0a9d-027b-79b032bf3d5f}">
      <Declaration><![CDATA[METHOD mTxMessgesSend : E_CanItfHelperHResult
]]></Declaration>
      <Implementation>
        <ST><![CDATA[mTxMessgesSend := THIS^.mCheckSetup();
IF (mTxMessgesSend < E_CanItfHelperHResult.NoError) THEN
	RETURN;
END_IF

CASE mTxMessgesSend OF
	E_CanItfHelperHResult.NoError_11Bit:

		IF (_uTxQueue.pTxQueue_11bit^.nNoOfmessages > Param_CanItfHelper.nTxQueueSize) THEN
			_nTxMsgSendCnt := GVL_CanItfHelper.nTxQueueUpperIndex;
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueInvalid;
			RETURN;
		END_IF	
		
		IF (_uTxQueue.pTxQueue_11bit^.nTxCounter <> _uRxQueue.pRxQueue_11bit^.nTxCounter)THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessgesSend := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF	
		
		(*(pTxQueue_11bit^.nTxCounter = pRxQueue_11bit^.nTxCounter)*)
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueEmpty;
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
			RETURN;
		END_IF
		
		
		(*(pTxQueue_11bit^.nTxCounter = pRxQueue_11bit^.nTxCounter)*)
		_uTxQueue.pTxQueue_11bit^.nTxCounter := _uRxQueue.pRxQueue_11bit^.nTxCounter + 1;
		_uTxQueue.pTxQueue_11bit^.nNoOfmessages := _nTxMsgSendCnt;
		_bTxMsgSent := TRUE;
		_nTxSendTaskCnt := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
		mTxMessgesSend := E_CanItfHelperHResult.NoError;
		
	E_CanItfHelperHResult.NoError_29Bit:
		IF (_uTxQueue.pTxQueue_29bit^.nNoOfmessages > Param_CanItfHelper.nTxQueueSize) THEN
			_nTxMsgSendCnt := GVL_CanItfHelper.nTxQueueUpperIndex;
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueInvalid;
			RETURN;
		END_IF	
		
		IF (_uTxQueue.pTxQueue_29bit^.nTxCounter <> _uRxQueue.pRxQueue_29bit^.nTxCounter)THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessgesSend := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF	
		
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueEmpty;
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
			RETURN;
		END_IF
		
		_uTxQueue.pTxQueue_29bit^.nTxCounter := _uRxQueue.pRxQueue_29bit^.nTxCounter + 1;
		_uTxQueue.pTxQueue_29bit^.nNoOfmessages := _nTxMsgSendCnt;
		_bTxMsgSent := TRUE;
		_nTxSendTaskCnt := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
		mTxMessgesSend := E_CanItfHelperHResult.NoError;
		
	E_CanItfHelperHResult.NoError_29Bit_nTrans:
		IF (_uTxQueue.pTxQueue_29bit_nTrans^.nNoOfmessages > Param_CanItfHelper.nTxQueueSize) THEN
			_nTxMsgSendCnt := GVL_CanItfHelper.nTxQueueUpperIndex;
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueInvalid;
			RETURN;
		END_IF	
		
		IF (_uTxQueue.pTxQueue_29bit_nTrans^.nTxCounter <> _uRxQueue.pRxQueue_29bit_nTrans^.nTxCounter)THEN
			IF (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
				mTxMessgesSend := E_CanItfHelperHResult.TxQueueIsBusy;
				RETURN;
			END_IF
		END_IF	
		
		IF _bTxMsgSent AND (_nTxSendTaskCnt <> TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount) THEN
			mTxMessgesSend := E_CanItfHelperHResult.TxQueueEmpty;
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
			RETURN;
		END_IF
		
		_uTxQueue.pTxQueue_29bit_nTrans^.nTxCounter := _uRxQueue.pRxQueue_29bit_nTrans^.nTxCounter + 1;
		_uTxQueue.pTxQueue_29bit_nTrans^.nNoOfmessages := _nTxMsgSendCnt;
		_bTxMsgSent := TRUE;
		_nTxSendTaskCnt := TwinCAT_SystemInfoVarList._TaskInfo[GETCURTASKINDEXEX()].CycleCount;
		mTxMessgesSend := E_CanItfHelperHResult.NoError;
END_CASE

bTxMsgsSending := _bTxMsgSent;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mTxQueueReset" Id="{28d6bbba-337c-09d8-3b56-7e31f4b9721a}">
      <Declaration><![CDATA[METHOD mTxQueueReset : E_CanItfHelperHResult

]]></Declaration>
      <Implementation>
        <ST><![CDATA[mTxQueueReset := THIS^.mCheckSetup();
IF (mTxQueueReset < E_CanItfHelperHResult.NoError) THEN
	RETURN;
END_IF


CASE mTxQueueReset OF
	E_CanItfHelperHResult.NoError_11Bit .. E_CanItfHelperHResult.NoError_29Bit_nTrans:
		IF (pTxQueue<>0) THEN
			MEMSET(destAddr := pTxQueue, 0, n :=cbTxQueueSize);
			_nTxMsgSendCnt := 0;
			_bTxMsgSent := FALSE;
			mTxQueueReset := E_CanItfHelperHResult.NoError;
		ELSE
			mTxQueueReset := E_CanItfHelperHResult.InvalidSetup;
		END_IF;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CanItfHelper">
      <LineId Id="576" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mCheckSetup">
      <LineId Id="19" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="96" Count="1" />
      <LineId Id="94" Count="0" />
      <LineId Id="108" Count="7" />
      <LineId Id="106" Count="0" />
      <LineId Id="86" Count="2" />
      <LineId Id="99" Count="1" />
      <LineId Id="90" Count="2" />
      <LineId Id="98" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mRxMessageGet">
      <LineId Id="549" Count="12" />
      <LineId Id="570" Count="0" />
      <LineId Id="574" Count="3" />
      <LineId Id="644" Count="2" />
      <LineId Id="643" Count="0" />
      <LineId Id="649" Count="0" />
      <LineId Id="651" Count="4" />
      <LineId Id="650" Count="0" />
      <LineId Id="642" Count="0" />
      <LineId Id="578" Count="3" />
      <LineId Id="648" Count="0" />
      <LineId Id="582" Count="3" />
      <LineId Id="590" Count="0" />
      <LineId Id="657" Count="14" />
      <LineId Id="656" Count="0" />
      <LineId Id="601" Count="4" />
      <LineId Id="647" Count="0" />
      <LineId Id="606" Count="3" />
      <LineId Id="612" Count="0" />
      <LineId Id="674" Count="14" />
      <LineId Id="672" Count="1" />
      <LineId Id="626" Count="3" />
      <LineId Id="689" Count="0" />
      <LineId Id="630" Count="2" />
      <LineId Id="458" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mRxMessagesAck">
      <LineId Id="206" Count="67" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mTxMessageAdd">
      <LineId Id="445" Count="1" />
      <LineId Id="448" Count="0" />
      <LineId Id="404" Count="1" />
      <LineId Id="407" Count="3" />
      <LineId Id="464" Count="1" />
      <LineId Id="411" Count="0" />
      <LineId Id="466" Count="2" />
      <LineId Id="414" Count="6" />
      <LineId Id="422" Count="3" />
      <LineId Id="469" Count="0" />
      <LineId Id="426" Count="3" />
      <LineId Id="431" Count="5" />
      <LineId Id="470" Count="1" />
      <LineId Id="473" Count="0" />
      <LineId Id="475" Count="14" />
      <LineId Id="474" Count="0" />
      <LineId Id="472" Count="0" />
      <LineId Id="438" Count="5" />
      <LineId Id="490" Count="1" />
      <LineId Id="514" Count="0" />
      <LineId Id="492" Count="16" />
      <LineId Id="510" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mTxMessgesSend">
      <LineId Id="251" Count="90" />
      <LineId Id="343" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CanItfHelper.mTxQueueReset">
      <LineId Id="44" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="56" Count="6" />
      <LineId Id="55" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>